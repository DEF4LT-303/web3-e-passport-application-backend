// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  password     String
  role         Role     @default(USER)
  refreshToken String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  formSubmissions FormSubmission[]
}

model FormSubmission {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passportType           PassportType?
  personalInfo           PersonalInfo?
  address                Address?
  idDocuments            IDDocuments?
  parentalInfo           ParentalInfo?
  spouseInfo             SpouseInfo?
  emergencyContact       EmergencyContact?
  passportOptions        PassportOptions?
  deliveryAndAppointment DeliveryAndAppointment?
  nftStatus              NftStatus?

  formStatus   Json?
  currentIndex Int?  @default(0)
}

// =================== Form Sections ======================

enum PassportTypeEnum {
  ORDINARY
  OFFICIAL
}

model PassportType {
  id   String           @id @default(uuid())
  type PassportTypeEnum

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model PersonalInfo {
  id            String  @id @default(uuid())
  gender        String?
  fullName      String?
  firstName     String?
  surName       String?
  profession    String?
  religion      String?
  countryCode   String?
  mobileNo      String?
  birthCountry  String?
  birthDistrict String?
  birthDate     String?
  citizenType   String?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model Address {
  id             String   @id @default(uuid())
  block          String?
  district       String?
  city           String?
  postOffice     String?
  postalCode     String?
  policeStation  String?
  yes            Boolean?
  no             Boolean?
  country        String?
  district2      String?
  city2          String?
  block2         String?
  postOffice2    String?
  postalCode2    String?
  policeStation2 String?
  officeType     String?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model IDDocuments {
  id            String   @id @default(uuid())
  prevPassport  String?
  otherPassport Boolean?
  nid           String?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model ParentalInfo {
  id                String   @id @default(uuid())
  fInfoStatus       Boolean?
  fatherName        String?
  fatherProfession  String?
  fatherNationality String?
  fatherNid         String?
  mInfoStatus       Boolean?
  motherName        String?
  motherProfession  String?
  motherNationality String?
  motherNid         String?
  lgiStatus         Boolean?
  legalGname        String?
  legalGprofession  String?
  legalGnationality String?
  mhaon             String?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model SpouseInfo {
  id                String  @id @default(uuid())
  maritalStatus     String?
  spouseName        String?
  spouseProfession  String?
  spouseNationality String?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model EmergencyContact {
  id                  String  @id @default(uuid())
  contactRelationShip String?
  name                String?
  country             String?
  district            String?
  city                String?
  block               String?
  postOffice          String?
  postalCode          String?
  policeStation       String?
  email               String?
  countryCode         String?
  mobileNo            String?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model PassportOptions {
  id       String  @id @default(uuid())
  validity String?
  price    String?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model DeliveryAndAppointment {
  id           String    @id @default(uuid())
  deliveryType String?
  price        String?
  dateTime     DateTime?

  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String         @unique
}

model NftStatus {
  id     String   @id @default(uuid())
  minted Boolean?
  nftId  String?

  formSubmission   FormSubmission? @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  formSubmissionId String?         @unique
}
